name: extension release

# NZBGet reusable workflow for extension release
# should be triggered on tag push
# example use:

# name: release

# on:
#   push:
#     tags:
#     - "v*"

# jobs:
#   release:
#     uses: nzbgetcom/nzbget-extensions/.github/workflows/extension-release.yml@main
#     with:
#       release-file-list: lib/ ChangeLog.txt README.* main.py manifest.json
#       release-file-name: videosort
#       release-dir: VideoSort

on:
  workflow_call:
    inputs:
      # File list to include in extension archive, space separated.
      # Wildcards can be used, directories should be ended with '/'
      # example: release-file-list: lib/ ChangeLog.txt README.* main.py manifest.json
      release-file-list:
        required: true
        type: string
      # release file base name
      # example: release-file-name: videosort
      # will produce releases files like videosort-1.0-dist.zip
      release-file-name:
        required: true
        type: string
      # top level directory in archive to put all files in
      # can be empty
      release-dir:
        type: string
        default: ""

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Prepare release archive
      run: |
        RELEASE_PATH=/tmp/release/${{ inputs.release-file-name }}/${{ inputs.release-dir }}
        mkdir -p $RELEASE_PATH
        for FILE in ${{ inputs.release-file-list }}; do cp -r $FILE $RELEASE_PATH; done
        cd $RELEASE_PATH
        if [ ! -z "${{ inputs.release-dir }}" ]; then cd ..; fi
        VERSION=${GITHUB_REF_NAME/v/}
        zip -r ${{ inputs.release-file-name }}-$VERSION-dist.zip *
        echo VERSION=$VERSION >> $GITHUB_ENV

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "/tmp/release/${{ inputs.release-file-name }}/*.zip"
        generateReleaseNotes: true
        allowUpdates: true
        removeArtifacts: true
        omitBodyDuringUpdate: true
        name: "Version ${{ env.VERSION }}"

    - name: Cleanup
      run: |
        rm -rf /tmp/release/${{ inputs.release-file-name }}
